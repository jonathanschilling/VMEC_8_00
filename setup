#!/bin/sh
#
#Stellarator configuration file
#
#Written by S. P. Hirshman (03/01/02), with lots of help from friends...
#Based on the original vmec_setup script of bygone days.
#
#                           M A I N   D I R E C T O R Y (S T E L L A R A T O R , T Y P I C A L L Y)
#                     
#---------------------------------------------------------------------------------------------------------------------------
#                      |           vmec_setup => makes all directories, makefiles    |        |         |        |         |
#                      |                                                             |        |         |        |         |
#                      |            |           |            |           |           |        |         |        |         |
#                      |            |           |            |           |           |        |         |        |         |
#                  LIBSTELL        VMEC      STELLOPT   BOOZ_XFORM    NESCOIL      BNORM    BOOTSJ   J_INVAR    PROUT  PGPROUT
#                  ---------    ---------  ----------    -------       -----       -----    ------   -------    -----  -------
#  make release => libstell       xvmec      xstellopt    xbooz        xcoil      xbnorm   xbootsj xj_invariant xprout xpgprout 
#                             |            |            |           |          |         |          |            |  
#                             |            |            |           |          |         |          |            |
#                             |            |            |           |          |         |          |            |
#                             |            |            |           |          |         |          |            |
#                            DKES         COBRA      MAKEGRID    COILOPT    DESCUR     V3RFUN     V3POST    INDUCTANCE
#                            ----         -----      -------     -------    -------    -------    ------    ----------
#                            xdkes,      xcobra,      xgrid     xcoilopt    xcurve     xv3rfun    xv3post     xinduct
#                          xdkes_prep  xcobravmec              xcoilgeom    xdes_plot
#

#Identify hardware platform
uname -a | grep AIX    && computer=risc6000
uname -a | grep CRAY   && computer=cray
uname -a | grep ULTRIX && computer=decstation
uname -a | grep IRIX   && computer=ccf
uname -a | grep IRIX64 && computer=orig2000
uname -a | grep OSF1   && computer=osf1
uname -a | grep HP-UX  && computer=HPUX
uname -a | grep SunOS  && computer=Sun
uname -a | grep SX-5   && computer=SX-5
uname -a | grep Linux  && computer=linux

INIT_UMASK=`umask`
MY_HOME=$HOME/bin
MACHINE_ID=`uname -n`
[ "$MACHINE_ID" = "falcon0" ] && MY_HOME=$HOME"/falcon"
ECHO="echo"
[ $computer = "linux" ] && ECHO="echo -e"


echo Script for generating STELLARATOR OPTIMIZATION SUITE executables


#---------------------------------------------------------------
# Define the Platform Type on which the computation is to be done ...
echo "  Computer = $computer"
#---------------------------------------------------------------
	FLAGS_R=""
	FLAGS_D="-g"
	PRINTFLAG="-O"
	STATIC_FLAG=""
	LINK="f90"
	MPI_LINK=""
	MPI_COMPILE=""
	MPI_RUN=""
	MPI_LIB=""
      LOCAL_MAKE="make"
	LIBDIR="libstell_dir"
	MODULE_PATH="-I"
	ARCHIVE="ar -ruv"
	COMPILE="f90"
	NCARGSYM="f90 $NCAR"
	NCARGLIB=""
	LIB=""
	FREE_FORM=""
	FIXED_FORM=""
	PGPLOT_DIR=""
      PGLIB=""
	MKDIR="mkdir -m 755"
	processors_per_node=1
	AWK="awk"
	LOG_OR="||"
	LOG_AND="\\\&\\\&"
	PREPROC="/lib/cpp -P -C "
	NETCDF_DIREC="/usr/local"
	LIBNETCDF="libnetcdf.a"
	NETCDF_INC=$NETCDF_DIREC/include
	NETCDF_LIB=$NETCDF_DIREC/lib/$LIBNETCDF
	COMPRESS="compress"
	ZIP="zip"
	UNCOMPRESS="uncompress"
	UNZIP="unzip"
      
case $computer in
winnt)
	precomp="cc -C -P -w -DWINNT"
	;;
cray) 
if [ $MACHINE_ID = "lonestar" ]
then
	precomp=$PREPROC"-DCRAY -DLONESTAR"
	FLAGS_R="-O3 "
elif [ $MACHINE_ID = "mcurie" ]
then
	precomp=$PREPROC"-DCRAY -DMCURIE"
	FLAGS_R="-Oscalar3,vector3"
	MPI_RUN="mpirun -np \$2 \$MY_HOME/xstellopt \$1"
	LINK='f90 -Wl"-D permok=yes"'
else
	precomp=$PREPROC"-DCRAY"
	FLAGS_R="-Oscalar3,vector3,task2"
	MPI_RUN="mpirun -np \$2 \$MY_HOME/xstellopt \$1"
fi
	FLAGS_D="-e D -e I"        
	FREE_FORM="-f free"
	NCARGSYM="f90 -O 3 $NCAR "
	MODULE_PATH="-p ."
	;;
risc6000)
	trap="-C -qinit=f90ptr -qinitauto=FF -bnoquiet -qnosave -qspnans \
-qflttrap=zero:ov:inv:en -qsigtrap"
	FLAGS_R="-O4 -qstrict -qnoipa"
#put all single-processor machines FIRST...
if [ $MACHINE_ID = "hirshman" ] || [ $MACHINE_ID = "fedu55" ] || 
   [ $MACHINE_ID = "jaeger" ] || [ $MACHINE_ID = "carter" ] 
then
	LIB="-lblas"
	FLAGS_R="-qnolm $FLAGS_R"
	FLAGS_D="-qnolm -g $trap -qextchk"
	NETCDF_DIREC="/raid/usr/local/netcdf-3.5.0"
	NCARGSYM="ncargf77"
else
	MPI_COMPILE="mpxlf90"
	MPI_LINK="mpxlf90 -bnoquiet"
	MPI_RUN="poe xstellopt \$1 -procs \$2 -tasks_per_node \$proc_per_node -nodes \$numnodes -rmpool 1"
      processors_per_node=16
	[ `echo $MACHINE_ID | grep eagle` ] && processors_per_node=4
	[ `echo $MACHINE_ID | grep eagle` ] && LIBNETCDF="libnetcdf_real8.a"
#	LIB="-lessl -lblas"    (lessl will not statically link)
	LIB="-lblas"
#     bug in mpi library does not work with -qextchk flag...
	FLAGS_D="-qnolm -g $trap"
	[ "$NETCDF_DIR" != "" ] && NETCDF_DIREC=$NETCDF_DIR
	NCARGSYM="xlf90"
	NCARGLIB=$NCAR
fi
#risc compiler does not recognize .f90 suffix as default; must force it
	NETCDF_INC=$NETCDF_DIREC/include
	NETCDF_LIB=$NETCDF_DIREC/lib/$LIBNETCDF
	FREE_FORM="-qsuffix=f=f90 -qfree=f90"
	FIXED_FORM="-qfixed"
	precomp=$PREPROC"-DRISC"
	COMPILE="xlf90"
	LINK="xlf90 -bnoquiet"
	FLAGS_R=$FLAGS_R" -qalias=noaryovrlp"
	STATIC_FLAG="-bnso -bI:/usr/lib/syscalls.exp"
	;;
ccf)
	precomp=$PREPROC"-DIRIX"
	FLAGS_R="-O"
	;;
orig2000)
	precomp="/usr/freeware/bin/cpp -P -C -traditional -DIRIX64"
	FREE_FORM="-freeform"
        platform="IP19"
        for platforms in IP19 IP20 IP21 IP22_4K IP22_5K \
                         IP24 IP25 IP26 IP27 IP28 IP30 IP32_5K IP32_10K IP35
        do
           hinv -c processor | grep $platforms && platform=$platforms
        done      

        PROCESSOR=" -r4000"
        for processors in 4000 5000 8000 10000 12000 14000
        do
  	   hinv -c processor | grep $processors && PROCESSOR=" -r"$processors
        done

        hinv | grep R10000 && PGPLOT_DIR=" /am/father/u0/lazarus/pgplot/mypgplot \
            -lpgplot64"

        FLAGS_R="-64 -mips4"$PROCESSOR" -TARG:platform=$platform -Ofast=$platform -IPA \
-LNO:vintr=on -OPT:alias=disjoint:fast_nint=off:roundoff=0:cray_ivdep=on:reorg_common=on"
        FLAGS_R_DKES="-64 -mips4"$PROCESSOR" -TARG:platform=$platform -O1 \
-LNO:vintr=on -OPT:Olimit=0:alias=disjoint:fast_nint=off:roundoff=0:cray_ivdep=on"
#NOTE: -O2 WORKS FOR MOST OF CODE EXCEPT DKES_INPUT_PREPARE; ABOUT FACTOR 2 SLOWER
	FLAGS_D="-g -C"
	LOCAL_MAKE="gmake"
	LIB="-lfastm -lblas"
	NCARGSYM="f90 "$FLAGS_R
	NCARGLIB="-L/usr/pppl/lib -lncarg -lncarg_gks -lncarg_c -lX11"
	MPI_RUN="mpirun -np \$2 xstellopt \$1"
	MPI_LIB=" -lmpi"
	if [ $MACHINE_ID = "hecate" ] 
	then
       	NETCDF_DIREC="/usr/pppl"
        NETCDF_INC=$NETCDF_DIREC/include
        NETCDF_LIB=$NETCDF_DIREC/lib/$LIBNETCDF

	elif [ $MACHINE_ID = "jen50" ]
	then
        NETCDF_DIREC="/r2/fusion/guasp/netcdf-3.5.0/src"
        NETCDF_INC=$NETCDF_DIREC/fortran
        NETCDF_LIB=$NETCDF_DIREC/libsrc/$LIBNETCDF
	fi
	;;
osf1)
if [ $MACHINE_ID = "polaris.physics.umt.edu" ]
then
	precomp=$PREPROC"-DLANGUAGE_FORTRAN -DOSF1"
	NETCDF_DIREC="/usr/local/netcdf-3.5.0"
	NETCDF_INC=$NETCDF_DIREC/include
	NETCDF_LIB=$NETCDF_DIREC/lib/$LIBNETCDF
elif [ $MACHINE_ID = "falcon0" ]
then
	precomp=$PREPROC"-DOSF1 -DFALCON"
	MPI_RUN="prun -N \$numnodes -n \$2 xstellopt \$1"
	MPI_LIB="-lcxml -lmpi -lelan"
	processors_per_node=4
else
	precomp=$PREPROC"-DOSF1"
fi
	LIB="-ldxml"
	FLAGS_R="-O5 -speculate all -transform_loops -arch host -tune host -math_library fast"
	FLAGS_D="-g -ladebug"
	FREE_FORM="-free"
	NCARGLIB="-L/usr/local/lib -lncarg -lncarg_gks -lncarg_c -lX11"
	;;
HPUX)
if [ $MACHINE_ID = "gate1" ] || [ $MACHINE_ID = "gate3" ]
then
	precomp=$PREPROC"-DHPUX -DNEED_BLAS"
	FREE_FORM="-f4"
	FLAGS_R="-Chopt -sx5 -Wf,-M noflovf"
	FLAGS_D="-g"
	COMPILE="sxf90"
	LINK="sxf90 -sx5"
	ARCHIVE="sxar -ruv"
else
	precomp=$PREPROC"-DHPUX"
	FLAGS_R="-O +U77 +FPdiuOVZ +FPdiuOVZ"
	FLAGS_D="-g +U77 +FPdiuOVZ +FPdiuOVZ"
	PRINTFLAG="+O3 +U77 +FPdiuOVZ"
	LINK="f90 +U77 +FPdiuOVZ +FPdiuOVZ"
	LIB="-lblas"
fi
	;;
linux)
	NETCDF_DIREC=/usr/local/netcdf-3.5.0
	COMPILE="lf95"
	LINK="lf95 --staticlink"
	FREE_FORM="--nfix"
	FLAGS_R="-O -X9"
	FLAGS_D="-g --chk a,e,s,u"
if [ $MACHINE_ID = "sherlock" ]
then
	COMPILE="lf95"
	LINK="lf95"
	FREE_FORM="-free"
	FLAGS_R="-O5 -arch ev56"
elif [ $MACHINE_ID = "work20.ipp-hgw.mpg.de" ]
then
	NETCDF_DIREC="/usr"
	LIBNETCDF="libnetcdf_f.a"
	COMPILE="f95f"
	LINK="f95f --staticlink"
	COMPRESS="gzip"
	ZIP="gzip"
	UNCOMPRESS="gunzip"
	UNZIP="gunzip"
elif [ $MACHINE_ID = "bc-c1" ]
then
	NETCDF_DIREC="/usr"
	LIBNETCDF="libnetcdf_f.a"
	COMPILE="f95f"
	LINK="f95f --staticlink"
	COMPRESS="gzip -S .Z"
	ZIP="zip"
	UNCOMPRESS="gunzip"
	UNZIP="unzip"
elif [ $MACHINE_ID = "pc2geiger.ipp-hgw.mpg.de" ]
then
	NETCDF_DIREC="/usr"
	LIBNETCDF="libnetcdf_f.a"
	COMPILE="f95f"
	LINK="f95f --staticlink"
	COMPRESS="gzip -S .Z"
	ZIP="zip"
	UNCOMPRESS="gunzip"
	UNZIP="unzip"
elif [ $MACHINE_ID = "lapgeiger" ]
then
	NETCDF_DIREC="/usr"
	LIBNETCDF="libnetcdf_f.a"
	COMPILE="ifc -Vaxlib"
	LINK="ifc -Vaxlib"
	FREE_FORM=" "
	FLAGS_R="-O"
	COMPRESS="gzip -S .Z"
	ZIP="zip"
	UNCOMPRESS="gunzip"
	UNZIP="unzip"
else
	uname -n | grep kiwi && NETCDF_DIREC=/usr/local
fi
	NETCDF_INC=$NETCDF_DIREC/include
	NETCDF_LIB=$NETCDF_DIREC/lib/$LIBNETCDF
	PGLIB="/usr/local/pgplot/libpgplot.a"
	PGPLOT_DIR="/usr/X11R6/lib"
	precomp=$PREPROC"-traditional -DLINUX -DNEED_BLAS"
	PRINTFLAG="-O5"
	;;
SX-5)
	precomp=$PREPROC"-DSX5 -USX -U_SX"
	LIB="-lblas"
	FREE_FORM="-f4"
	FLAGS_R="-Chopt"
	FLAGS_D="-g"
	;;
Sun)
	AWK="nawk"
	NETCDF_DIREC="/usr/local/netcdf-3.5.0/src"
	PREPROC="/usr/ccs/lib/cpp -P -C "
	precomp=$PREPROC"-DSUNOS"
	LIB="-xlic_lib=sunperf"
	FREE_FORM="-free"
	if [ $MACHINE_ID = "tranquility" ]
	then
   	   FLAGS_R="-fast -O5 -xarch=v9a -dalign -xlibmopt"
	else
   	   FLAGS_R="-fast -O5 -xarch=v8plusa -dalign -xlibmopt"
	fi
# minilla.physics.auburn.edu
	if [ $MACHINE_ID = "minilla" ]
	then
	   NETCDF_DIREC="/opt/local"
	fi
	PRINTFLAG="-O5"
	MODULE_PATH="-M"
	NETCDF_INC=$NETCDF_DIREC/include
	NETCDF_LIB=$NETCDF_DIREC/lib/$LIBNETCDF

	;;
axpvms)			#assume precompilation done on UNIX system
     	precomp=$PREPROC"-DVMS -DAXPVMS"
	;;
vaxornl) 		#assume precompilation done on UNIX system
     	precomp=$PREPROC"-DVMS"
	;;
esac
#---------------------------------------------------------------
#   End platform identification
#   Next, query user about type of update/distribution/make he desires
#   First ascertain that the required installation ZIP file (stellinstall.zip)
#   or compressed tar file (stellunix.tar.Z) exists in the current user directory. 
#   "Unmask" dependency files that may already exist from prior installation.
#   Set umask so ONLY the user and his group can read files (user can write to
#   the "Sources" directory files, too...) but should NOT write over certain 
#   "make" files and object-file listings.
#---------------------------------------------------------------
$ECHO
if [ -f stellinstall.zip ] 
then
    $ECHO "unzipping stellinstall"
    $UNZIP -u -Uoq stellinstall.zip 
    $UNZIP -u -Uaoq stellinstall.zip README tarstell zipstell
    UNZIP1="$UNZIP -Uaoq"
    UNTAR=""
elif [ -f stellunix.tar.Z ] || [ -f stellunix.tar ]
then
    if [ -f stellunix.tar.Z ]
    then
       $ECHO "uncompressing stellunix"
       $UNCOMPRESS stellunix.tar.Z
    fi
    UNTAR="tar -xof stellunix.tar "
    $UNTAR README tarstell
    UNZIP1=""
else
    $ECHO "  The required distribution files (stellinstall.zip or stellunix.tar.Z) were NOT found"
    $ECHO "  Installation will be halted"; exit
fi

#umask u=rwx,g=rx,o=
umask 027
find "." -name '*.dep' -exec chmod u+w {} \;

$ECHO
$ECHO '  Enter version type to make (release-R, debug-D) : \c'
read v_in
input=`echo $v_in | tr "[:lower:]" "[:upper:]"`
if [ "$input" = 'D' ]
then
   VERSION="debug"
else
   VERSION="release"
fi      

#---------------------------------------------------------------
#   Next, query user about executables to be made
#---------------------------------------------------------------
$ECHO
$ECHO '  Specify project(s) to make from the following list: '
$ECHO
$ECHO '  all booz_xform bootsj bnorm cobra cobravmec coilopt descur dkes'
$ECHO '  inductance j_invariant lib makegrid neo nescoil prout pgprout'
$ECHO '  stellopt vacopt vmec vmec2000 vmec2002 v3post v3rfun'
$ECHO
read v_in
FILES_TO_MAKE=`echo $v_in | tr "[:upper:]" "[:lower:]"`
if [ "$FILES_TO_MAKE" = "all" ]
then
   FILES_TO_MAKE="booz_xform bootsj bnorm cobra cobravmec coilopt descur dkes inductance j_invariant \
    makegrid neo nescoil prout pgprout vacopt vmec2000 vmec2002 v3post v3rfun stellopt"
fi
[ "$FILES_TO_MAKE" = "lib" ] && FILES_TO_MAKE=""

#---------------------------------------------------------------
#   Next, determine if NETCDF directory is there and netcdf.inc can be found
#---------------------------------------------------------------
$ECHO
if [ -f $NETCDF_INC/netcdf.inc ] 
then
   NETCDF_EXISTS=TRUE
   $ECHO '  Netcdf files located'
   precomp=$precomp" -DNETCDF"
else
   NETCDF_EXISTS=FALSE
   NETCDF_LIB=""
   $ECHO '  Netcdf files could not be found in the specified directory: '
   $ECHO '  '$NETCDF_DIREC
   $ECHO '  If this is the wrong directory, please stop setup now '
   $ECHO '  and fix the NETCDF_DIREC variable in this setup script'
fi
$ECHO
#---------------------------------------------------------------
#   Sort list and remove duplicate requests
#---------------------------------------------------------------
rm -f tempfile
for name in $FILES_TO_MAKE
do
   echo $name >> tempfile
done
[ -f tempfile ] && FILES_TO_MAKE=`sort -u -f tempfile`
rm -f tempfile

precomp_nompi=$precomp
[ -n "$MPI_RUN" ] && precomp=$precomp" -DMPI_OPT"

#---------------------------------------------------------------
#   Create $MY_HOME directory for storing links to Stellarator executables.
#   If user does not allow creation of this directory, terminate installation.
#---------------------------------------------------------------
if [ ! -d $MY_HOME ] 
then
   $ECHO 
   $ECHO "  The directory $MY_HOME MUST be created to store links to Stellarator executables."
   $ECHO "  Do you wish to create this directory (Y/N)? \c"
   read PROCYN
   if [ $PROCYN = 'y' ] || [ $PROCYN = 'Y' ]
   then
      $ECHO "  Be sure to add $MY_HOME to your path!"
      $MKDIR $MY_HOME
   else
      $ECHO "  The installation will terminate now." 
      $ECHO "  Try again after creating $MY_HOME directory."
      exit
   fi
fi    

#---------------------------------------------------------------
#   Catenate the awk script files, awk_dep and awk_cdir (.awk)
#   awk_dep  converts the dependency file (*.dep)  into UNIX compatible form.
#   awk_cdir converts the source files (*.f,*.f90), which contain compiler directives,
#   into genuine, hardware platform-dependent, FORTRAN sources ready for compilation.
#
#   NOTE: QUOTES AROUND EOF CAN BE USED TO AVOID HAVING TO ESCAPE (\) ALL
#   THE $ CHARACTERS. THIS WORKS ONLY WHEN THERE ARE NO SHELL SUBSTITUTIONS IN THE CAT-ED SCRIPT.
#---------------------------------------------------------------
cat > awk_dep.awk << "EOF"
#Written by S. P. Hirshman (02/26/02)
#This script converts a Windows (compaq Fortran) generated dependency file
#into UNIX readable form

#Remove all occurences of .\Sources\..\ and .\Release\
#Convert all WIN "\" to UNIX "/" 
#Change ".mod" with ".o" and ".f,.f90" to ".o"
#Change ..\LIBSTELL to ../../LIBSTELL
#Eliminate tabs and "\" at end of each dependency group of lines

BEGIN {ntabs = 0; nsource = 0}

#Convert upper case *.mod files names into lower case
$1 ~ /[A-Z]*\.mod/  { n = split ($1, path, "\\"); 
mypath=""
for (i = 1; i < n-1; i++) mypath = mypath sprintf("%s\\", path[i]);
transtring = tolower(path[n-1])"\\";
$0 = "\t" mypath transtring;
}

#Lines with ONLY tabs separate dependency. Store previous line in TabLine array
#so that continuation symbol (\) can be eliminated. Also, replace ALL tabs with 6 blanks
{if ($0 == "\t") TabLine[++ntabs] = NR-1;  gsub(/\t/,"      ")}  
{sub(/\.f : /,".o : ")} 
{sub(/\.f90 : /,".o : ")} 


$1 ~ /\.\\Sources\\/ {n = split($1,path,"\\"); $0=path[n]" : \\"; SourceLine[++nsource] = NR} 
{sub(/\".\\Release\\/,"");  sub(/\.mod/,".o")} 
{sub(/\"\.\.\\LIBSTELL\\Release\\/,"../../LIBSTELL/Release/")} 
{sub(/\"\\/," \\")}
{record[NR] = $0}

#strip trailing "\" between on last dependency line for each source
#strip netcdf.inc and eliminate entire source line record if that is the ONLY dependency line
END {j = 1; k = 1; for (i = 1; i <= NR; i++) {
    if (i == SourceLine[k])
    {
       k++; i1 = i+1
       if (record[i1] ~ /netcdf.inc/)
       {
           if (i1 >= NR) exit;
           if (i1 == TabLine[j]) {j++; i += 3} 
       }
    } 
    if (i == TabLine[j]) {if (j < ntabs) j++; $0 = record[i]; gsub(/\\/,"");record[i] = $0}
    if (record[i] !~ /netcdf.inc/) print record[i]}
    } 
EOF
cat > awk_cdir.awk << EOF
#Written by S. P. Hirshman (02/26/02)
#This script converts a *.f (or *.f90) file which was generated by Windows (using Compaq Fortran) 
#to remove conditional compilation statements (converts to a file that UNIX C-preprocessor
#can precompile)

\$1 !~ /^!DEC\\$/ {print \$0} 
\$1 ~ /^!DEC\\$/ {sub(/!DEC\\$ /,"#"); \\
gsub(/ELSEIF/,"elif"); gsub(/DEFINED/,"defined"); gsub(/UNDEFINE/,"undef"); \\
gsub(/\.NOT\./,"!");   gsub(/\.AND\./,"$LOG_AND"); gsub(/\.OR\./,"$LOG_OR"); \\
gsub(/ELSE/,"else");   gsub(/ENDIF/,"endif");  gsub(/IF /,"if "); print \$0}
EOF

rm -f $MY_HOME/awk_cdir.awk
mv awk_cdir.awk $MY_HOME

TOP_LEVEL_DIR=`pwd`

#---------------------------------------------------------------
#   Add "coilgeom" to FILES_TO_MAKE if "coilopt" is in FILES_TO_MAKE 
#   Add "descur_plot" to FILES_TO_MAKE if "descur"  in FILES_TO_MAKE
#---------------------------------------------------------------
    $ECHO $FILES_TO_MAKE | $AWK '$0 ~ /coilopt/ {sub(/coilopt/,"coilopt coilgeom")} \
    $0 ~ /descur/ {sub(/descur/,"descur descur_plot")} {print $0};' > NEW_FILES
    FILES_TO_MAKE=`cat NEW_FILES`
    rm -f NEW_FILES
    $ECHO "  Files to make: libstell "$FILES_TO_MAKE
    $ECHO 
    
#---------------------------------------------------------------
#   Begin for-do loop over FILES_TO_MAKE  
#   Note: lib MUST be first to be made for this to work properly...
#---------------------------------------------------------------

for FILES in libstell $FILES_TO_MAKE
do
  COMPILE1=$COMPILE
  cd $TOP_LEVEL_DIR
  
#---------------------------------------------------------------
#   Check AIX Version and warn user 
#---------------------------------------------------------------
    if [ "$FILES" = "vmec2000" ] && [ "$computer" = "risc6000" ]
    then
        AIX_VERSION=`what /usr/lpp/xlf/bin/xlfentry | grep -i version`
        $ECHO
        $ECHO "*********************************************************"
        $ECHO "*                                                       *"
        $ECHO "* WARNING: VMEC2000 REQUIRES AIX Version 8.0 OR GREATER *"
        $ECHO "*          TO AVOID COMPILER BUG IN 2D PRECONDITIONER   *"
        $ECHO "*                                                       *"
        $ECHO "* PRESENT OS: "$AIX_VERSION
        $ECHO "*                                                       *"
        $ECHO "* USE make static_release OPTION ON ACCEPTABLE SYSTEM   *"
        $ECHO "* IF YOUR OS IS OUT OF DATE                             *"
        $ECHO "*                                                       *"
        $ECHO "*********************************************************"
        $ECHO
        $ECHO "Press <return> to continue..."
        read $junk
        
    fi
    
#---------------------------------------------------------------
#   Set compiler, linker option flags here and default directories
#   If user typed in "lib", ignore it since "libstell" is made instead
#---------------------------------------------------------------
  DIR=`echo $FILES | tr "[:lower:]" "[:upper:]"`

  [ "$DIR" = "LIB" ] && continue
  [ "$DIR" = "COILGEOM" ] && [ ! -d ./COILOPT ] && continue

  EXE_FILE="x"$FILES
  FLAGS_R0=$FLAGS_R
  FLAGS_D0=$FLAGS_D
  [ $DIR = "DKES" ] && [ $computer = "orig2000" ] && FLAGS_R0=$FLAGS_R_DKES
  LIBRARY="libstell.a"
  LINK_FILE=$LINK" \$(FLAGS) \$(SFLAGS) -o"
  LINK_LIB="libstell.a $LIB"
  MOD_PATH="$MODULE_PATH\$(MYHOME)/$LIBDIR"
  BANNER_REL="Beginning release compilation and linking of $FILES"
  BANNER_DBG="Beginning debug compilation and linking of $FILES"
  actual_precomp=$precomp
  
  case $FILES in
  libstell)   
         EXE_FILE="libstell.a"
         LINK_FILE=$ARCHIVE
         MOD_PATH=""
         BANNER_REL="Beginning release compilation and archiving of $FILES"
         BANNER_DBG="Beginning debug compilation and archiving of $FILES"
         [ -n "$MPI_COMPILE" ] && COMPILE1=$MPI_COMPILE  
  ;;
  coilopt)  
         [ -n "$MPI_COMPILE" ] && COMPILE1=$MPI_COMPILE  
         [ -n "$MPI_LINK" ] && LINK_FILE="$MPI_LINK \$(FLAGS) -o"
         [ -n "$MPI_LIB" ] &&  LINK_LIB="$LINK_LIB $MPI_LIB"
  ;;
  coilgeom)
         [ ! -d ./$DIR ] && $MKDIR ./$DIR
         actual_precomp=$precomp_nompi" -DGEOM_ONLY"
  ;;
  descur)EXE_FILE="xcurve"
  ;;
  descur_plot) 
         EXE_FILE="xdes_plot"
         LINK_FILE=$NCARGSYM" -o"
         LINK_LIB="$LINK_LIB $NCARGLIB"
  ;;
  inductance)
         EXE_FILE="xinduct"
  ;;
  makegrid)
         EXE_FILE="xgrid"
  ;;
  stellopt)
         [ -n "$MPI_COMPILE" ] && COMPILE1=$MPI_COMPILE  
         [ -n "$MPI_LINK" ] && LINK_FILE="$MPI_LINK \$(FLAGS) -o"
         [ -n "$MPI_LIB" ] &&  LINK_LIB="$LINK_LIB $MPI_LIB"
  ;;
  prout) DIR="PLOTTER"
         LINK_FILE=$NCARGSYM" -o"
         LINK_LIB="$LINK_LIB $NCARGLIB"
  ;;  
  pgprout)
      if [ ! -z "$PGPLOT_DIR" ] 
      then
	      PGLIB="$PGLIB -L$PGPLOT_DIR -lX11"
      elif [ -f "$PGLIB" ] 
      then
	      PGLIB="-L/usr/local/pgplot -lpgplot -lX11"
      else
	      echo "  Cannot find PGPLOT_DIR: will not be able to make pgprout!"
      fi
         LINK_LIB="$LINK_LIB $PGLIB"
  ;;
  esac


#---------------------------------------------------------------
#   If $DIR == LIBSTELL exists, check if this should be a clean remake
#---------------------------------------------------------------
  CLEAN="dirty"
  if [ "$DIR" = "LIBSTELL" ] && [ -d ./$DIR ]
  then
     $ECHO '  Specify a CLEAN MAKE (rebuilds existing .o files, even if they are not out of date)'
     $ECHO '  or an ORDINARY MAKE (default) - (C/O): \c  '
     read v_in
     if [ "$v_in" = 'c' ] || [ "$v_in" = 'C' ]
     then
        CLEAN="clean"
     fi   
  fi
#---------------------------------------------------------------
#   The original UNZIP call (if executed) makes all the required directories. 
#   Alternatively, if using tar file, then untar this directory.
#   First check if "clean" build is requested, then remove "Sources" files.
#---------------------------------------------------------------
   [ "$UNTAR" != "" ] && FILE_EXISTS=`tar -tf stellunix.tar $DIR`
   CLEAN_LIBMAKE='N'
   if [ "$CLEAN" = "clean" ] && [ -d ./$DIR ]  
   then  
      if [ "$DIR" = "LIBSTELL" ] 
      then
         $ECHO
         $ECHO '  Do you REALLY want a clean rebuild of the library (Y/N)? \c'
         read v_in
         CLEAN_LIBMAKE=`echo $v_in | tr "[:lower:]" "[:upper:]"`
      fi
      if [ "$CLEAN_LIBMAKE" = 'Y' ] || ([ "$DIR" != "LIBSTELL" ] && [ "$DIR" != "COILGEOM" ] \
                                    && ([ "$FILE_EXISTS" != "" ] || [ "$UNZIP1" != "" ]))
         then
            SRC_DIR=`ls -F ./$DIR/Sources | grep /`
            pwd=`pwd`
            for directory in $SRC_DIR .
            do
               new_dir="./"$DIR"/Sources/"$directory
               cd $new_dir
               rm -f *.f *.f90
               $ECHO "  Source files removed in directory "$new_dir
               cd $pwd
            done
         fi
   fi 
   [ "$UNTAR" != "" ] && $UNTAR $DIR

#---------------------------------------------------------------
#   If $DIR does not exist already, then there are no files, 
#   so branch back to top of this FOR loop. 
#---------------------------------------------------------------
  if [ ! -d ./$DIR ] 
  then
     $ECHO
     $ECHO "  Directory "$DIR" does not exist."
     $ECHO "  Continuing installation of other files..."
     continue
  fi

#---------------------------------------------------------------
#   Move to $DIR directory (one level below TOP_LEVEL_DIR)
#   Add Release and Debug branches directory tree structure of $FILES 
#---------------------------------------------------------------

  cd ./$DIR

  $ECHO
  [ ! -d ./Debug ] && ($MKDIR ./Debug && $ECHO "  Creating $DIR/Debug")
  [ ! -d ./Release ] && ($MKDIR ./Release && $ECHO "  Creating $DIR/Release")

  if [ "$DIR" = "COILGEOM" ] 
  then
     cd Release;  rm -f COILGEOM.dep; ln -fs ../../COILOPT/Release/COILOPT.dep COILGEOM.dep 
     cd ../Debug; rm -f COILGEOM.dep; ln -fs ../../COILOPT/Debug/COILOPT.dep COILGEOM.dep 
     cd ..

  elif [ "$UNZIP1" != "" ]
  then
     if [ ! -f $DIR.zip ]
     then
        $ECHO $DIR".zip file not found"; continue
     fi

#---------------------------------------------------------------
#   Check integrity of zip archive
#---------------------------------------------------------------
     if ! $UNZIP -Ut -qq $DIR.zip
     then
        $ECHO "$DIR.zip archive is corrupt: get new archive before continuing installation"
        exit
     else
        $UNZIP1 $DIR.zip
     fi
  fi
 
#---------------------------------------------------------------
#   Create V_PATH string for makefile VPATH (excluding CVS directories)
#---------------------------------------------------------------
  [ "$DIR" = "COILGEOM" ] && cd ../COILOPT
  cd Release
  S_PATH=`find ../Sources \( -type d -a ! -name "\CVS" \)`
  V_PATH=`echo $S_PATH | sed -e s/" ..\/Sources"/":\\$(SPATH)"/g \
                             -e s/"..\/Sources"/"\\$(SPATH)"/`
  cd ..
  SPATH="../Sources"
  [ "$DIR" = "COILGEOM" ] && cd ../COILGEOM && SPATH="../../COILOPT/Sources"

#---------------------------------------------------------------
#   Convert Windows *.dep dependency files into UNIX compatible form
#   Remove trailing "\" using sed
#   Must replace "Release" with "Debug" paths in all files (except libstell).
#   Give subsequent files r (x) privelege, but do not allow user to write to them.
#
#   If distribution is through a .tar file (preferred mode), the $DIR.dep
#   does NOT exist in this directory so the awk below will NOT be performed. Rather,
#   $DIR.dep is already in the Release and Debug directories
#---------------------------------------------------------------
  if [ "$DIR" != "COILGEOM" ] && [ -f $DIR.dep ]
  then
     rm -f tempfile
     $AWK -f ../awk_dep.awk $DIR.dep > tempfile
     chmod u-w tempfile
     cp tempfile Release/$DIR.dep
     rm -f $DIR.dep

     if [ "$DIR" = LIBSTELL ]
     then
        mv tempfile Debug/LIBSTELL.dep 
     else
        $AWK '$0 !~ /\Release\// {print $0}
             $0 ~ /\/Release\// {sub(/Release/,"Debug"); print $0}' tempfile > $DIR.dep
        chmod u-w $DIR.dep
        mv $DIR.dep Debug     
     fi

     rm -f tempfile 
  fi
#---------------------------------------------------------------
#   Generate ObjectList file containing all the object files (*.o) to be built
#   Change suffixes *.f (and *.f90, free format) to *.o and add \ for line continuation
#   (needed so makefile can read it). Remove the "\" from the final line.
#   Note: MUST write the initial "find" to a file. Writing to a string will work
#   ONLY if there are < 100 files (otherwise, awk will not be able to parse the fields).
#---------------------------------------------------------------
  if [ "$DIR" != "COILGEOM" ]
  then
     LIST_FILE=ObjectList
     rm -f $LIST_FILE
     $ECHO "ObjectFiles = \\" > $LIST_FILE
     find ./Sources \( -name '*.f' -o -name '*.f90' \) -exec basename {} \; >> $LIST_FILE
     $AWK '/\.f90/ {gsub(/\.f90/,".o")} \
           /\.f/   {gsub(/\.f/,".o")} {records[NR] = $0} \
           END {{print records[1]}; for (i = 2; i <= NR; i++) \
            {if (i < NR) printf "%s \\\n",records[i];
             else printf "%s \n",records[i]}}' $LIST_FILE > TEMP_FILE 

     mv TEMP_FILE $LIST_FILE
     chmod u-w,og-rw $LIST_FILE
  else
     rm -f ObjectList; cp ../COILOPT/ObjectList .
  fi

#---------------------------------------------------------------
#   Create primary make file (makefile) and place in $DIR 
#   Remove old one(s) first
#---------------------------------------------------------------
  $ECHO
  $ECHO "  Creating make file in "$DIR
  MAKEFILE=make$FILES
  [ "$FILES" = "makegrid" ] && MAKEFILE="makemgrid"

  rm -f makefile

cat > makefile << EOF
#Type "make release(debug)" at command line to make release(debug) version  
#DO NOT alter the directory structure or move this makefile (must be in first subdirectory below top_level_dir)
  SHELL = /bin/sh
  DBG = Debug
  REL = Release
  PWD1 = \`pwd\`
  REL_PATH = \$(PWD1)/\$(REL)
  DBG_PATH = \$(PWD1)/\$(DBG)
  MOD1_PATH = $MOD_PATH
  FLAGS_R = $FLAGS_R0
  FLAGS_D = $FLAGS_D0
  EXE_F = $EXE_FILE
  MAKE = $MAKEFILE
  MYHOME = \$(HOME)/bin
  LIB_DIR = \$(MYHOME)/$LIBDIR

release:
	@echo "$BANNER_REL"
	@cd \$(REL); rm -f *.f *.f90 *.c; rm -f \$(MAKE); ln -fs ../\$(MAKE) .; $LOCAL_MAKE -f \$(MAKE) \$(EXE_F) FLAGS="\$(FLAGS_R) \$(MOD1_PATH)" TYPE="release"
	@rm -f \$(MYHOME)/\$(EXE_F)
	@-(umask 022; rm -f \$(MYHOME)/\$(EXE_F); ln -fs \$(REL_PATH)/\$(EXE_F) \$(MYHOME) 2> /dev/null; umask 077)
EOF
if [ "$FILES" = "libstell" ]
then
cat >> makefile << EOF
	@-(umask 022; rm -f \$(LIB_DIR); ln -fs \$(REL_PATH) \$(LIB_DIR) 2> /dev/null; umask 077)
EOF
fi     
cat >> makefile << EOF
	@echo "Release version - $EXE_FILE - is now updated"
	@echo "To free up space, delete all *.o files from Release"
	@echo ""

debug:
	@echo "$BANNER_DBG"
	@cd \$(DBG); rm -f *.f *.f90 *.c; rm -f \$(MAKE); ln -fs ../\$(MAKE) .; $LOCAL_MAKE -f \$(MAKE) \$(EXE_F) FLAGS="\$(FLAGS_D) \$(MOD1_PATH)" TYPE="debug"
	@rm -f \$(MYHOME)/\$(EXE_F)
	@-(umask 022; rm -f \$(MYHOME)/\$(EXE_F); ln -fs \$(DBG_PATH)/\$(EXE_F) \$(MYHOME) 2> /dev/null; umask 077)
EOF
if [ "$FILES" = "libstell" ]
then
cat >> makefile << EOF
	@-(umask 022; rm -f \$(LIB_DIR); ln -fs \$(DBG_PATH) \$(LIB_DIR) 2> /dev/null; umask 077)
EOF
fi     
cat >> makefile << EOF
	@echo "Debug version - $EXE_FILE - is now updated"
	@echo "To free up space, delete all *.o files from Debug"
	@echo ""

clean_release: 
	@echo "CLEAN REMAKE IN PROGRESS"
	@cd \$(REL); $LOCAL_MAKE -f \$(MAKE) clean
	@$LOCAL_MAKE release

clean_debug: 
	@echo "CLEAN REMAKE IN PROGRESS"
	@cd \$(DBG); $LOCAL_MAKE -f \$(MAKE) clean
	@$LOCAL_MAKE debug
      
static_release:      
	@echo "MAKING STATIC (RELEASE) EXECUTABLE"
	@cd \$(REL); rm -f *.f *.f90 *.c; rm -f \$(MAKE); ln -fs ../\$(MAKE) .; $LOCAL_MAKE -f \$(MAKE) \$(EXE_F) FLAGS="\$(FLAGS_R) \$(MOD1_PATH)" SFLAGS="$STATIC_FLAG" TYPE="release"
	@rm -f \$(MYHOME)/\$(EXE_F)
	@-(umask 022; rm -f \$(MYHOME)/\$(EXE_F); ln -fs \$(REL_PATH)/\$(EXE_F) \$(MYHOME) 2> /dev/null; umask 077)
EOF
if [ "$FILES" = "libstell" ]
then
cat >> makefile << EOF
	@-(umask 022; rm -f \$(LIB_DIR); ln -fs \$(REL_PATH) \$(LIB_DIR) 2> /dev/null; umask 077)
EOF
fi     
cat >> makefile << EOF
	@echo "Static Release version - $EXE_FILE - is now updated"
	@echo "To free up space, delete all *.o files from Release"
	@echo ""
EOF

chmod u+x-w makefile

#---------------------------------------------------------------
#   Create recursively-called make file (make$FILES) to go into 
#   $DIR/Release  or $DIR/Debug directories
#   Note: because some compilers do not recognize .f90 extension,
#   the make file copies the *.f90 files to *.f and compiles them
#   in free format
#---------------------------------------------------------------
  rm -f $MAKEFILE
FILE_FOR="'\$*''.f'"
FILE_F90="'\$*''.f90'"
FILE_C="'\$*''.c'"
FILE_O="'\$*''.o'"
  
  if [ "$FILES" = "libstell" ]
  then
  
#Make Library makefile
cat > $MAKEFILE << EOF
#This makefile goes in dirs Debug and Release (first level below $DIR)
SHELL   = /bin/sh
PRECOMP = $actual_precomp
COMPILE = $COMPILE1 $FIXED_FORM
COMPILE_FREE = $COMPILE1 $FREE_FORM
FFILE   = $FILE_FOR
CFILE   = $FILE_C
F90FILE = $FILE_F90
LINK    = $LINK_FILE
HOME_BIN= \$(HOME)/bin
MOD_PATH= $MODULE_PATH
INC_PATH= -I$NETCDF_INC
SPATH   = $SPATH

#Contains list of source files (.o) and dependencies
DEPLIST = $DIR.dep
OBJLIST = ../ObjectList
VPATH = $V_PATH

#Includes source files and dependency list
include \$(DEPLIST)
include \$(OBJLIST)

.SUFFIXES :
.SUFFIXES : .f .f90 .o

$EXE_FILE : \$(ObjectFiles) 
	\$(LINK) \$@ \$(ObjectFiles)

#Compile object files defined in DEPLIST.
.f.o :
	@if grep -q '^!DEC\\$\$' \$<; \\
      then \\
         $AWK -f \$(HOME_BIN)/awk_cdir.awk \$< > \$(CFILE) ; \\
         echo '\$(PRECOMP) \$<'; \$(PRECOMP) \$(CFILE) \$(FFILE); \\
         rm -f \$(CFILE); echo '\$(COMPILE) \$(FLAGS) \$(MOD_PATH).. -c \$<'; \\
         \$(COMPILE) \$(FLAGS) \$(MOD_PATH).. -c \$(FFILE); rm -f \$(FFILE); \\
      else \\
         echo '\$(COMPILE) \$(FLAGS) \$(MOD_PATH). -c \$<'; \\
         \$(COMPILE) \$(FLAGS) \$(MOD_PATH). -c \$< ; \\
      fi

.f90.o :
	@if grep -q '^!DEC\\$\$' \$<; \\
      then \\
         $AWK -f \$(HOME_BIN)/awk_cdir.awk \$< > \$(CFILE) ; \\
         echo '\$(PRECOMP) \$<'; \$(PRECOMP) \$(CFILE) \$(F90FILE); \\
         rm -f \$(CFILE); echo '\$(COMPILE_FREE) \$(FLAGS) \$(MOD_PATH).. \$(INC_PATH) -c \$<'; \\
         \$(COMPILE_FREE) \$(FLAGS) \$(MOD_PATH).. \$(INC_PATH) -c \$(F90FILE); rm -f \$(F90FILE); \\
      else \\
         echo '\$(COMPILE_FREE) \$(FLAGS) \$(MOD_PATH). \$(INC_PATH) -c \$<'; \\
         \$(COMPILE_FREE) \$(FLAGS) \$(MOD_PATH).. \$(INC_PATH) -c \$< ; \\
      fi
clean:
	- rm -f *.o *.mod *.a
EOF

  else

cat > $MAKEFILE << EOF
#This makefile goes in dirs Debug and Release (first level below $DIR)
SHELL   = /bin/sh
MYHOME = \$(HOME)
HOME_BIN= \$(MYHOME)/bin
LIB_DIR = ../../LIBSTELL
PRECOMP = $actual_precomp
COMPILE = $COMPILE1 $FIXED_FORM
COMPILE_FREE = $COMPILE1 $FREE_FORM
FFILE   = $FILE_FOR
CFILE   = $FILE_C
F90FILE = $FILE_F90
LINK    = $LINK_FILE
LIB_LINK= \$(HOME_BIN)/$LINK_LIB $NETCDF_LIB
LIB     = $LIBRARY
MOD_PATH= $MODULE_PATH
SPATH   = $SPATH

#Contains list of source files (.o) and dependencies
DEPLIST = $DIR.dep
OBJLIST = ../ObjectList

#Includes source files and dependency list
include \$(DEPLIST)
include \$(OBJLIST)
VPATH = $V_PATH

.SUFFIXES :
.SUFFIXES : .f .f90 .o

$EXE_FILE:  \$(LIB) \$(ObjectFiles)
	\$(LINK) \$@ \$(ObjectFiles) \$(LIB_LINK)

#Compile object files defined in DEPLIST.
.f.o :
	@if grep -q '^!DEC\\$\$' \$<; \\
      then \\
         $AWK -f \$(HOME_BIN)/awk_cdir.awk \$< > \$(CFILE) ; \\
         echo '\$(PRECOMP) \$<'; \$(PRECOMP) \$(CFILE) \$(FFILE); \\
         rm -f \$(CFILE); echo '\$(COMPILE) \$(FLAGS) \$(MOD_PATH).. -c \$<'; \\
         \$(COMPILE) \$(FLAGS) \$(MOD_PATH).. -c \$(FFILE); rm -f \$(FFILE); \\
      else \\
         echo '\$(COMPILE) \$(FLAGS) \$(MOD_PATH). -c \$<'; \\
         \$(COMPILE) \$(FLAGS) \$(MOD_PATH). -c \$<; \\
      fi

.f90.o :
	@if grep -q '^!DEC\\$\$' \$<; \\
      then \\
         $AWK -f \$(HOME_BIN)/awk_cdir.awk \$< > \$(CFILE) ; \\
         echo '\$(PRECOMP) \$<'; \$(PRECOMP) \$(CFILE) \$(F90FILE); \\
         rm -f \$(CFILE); echo '\$(COMPILE_FREE) \$(FLAGS) \$(MOD_PATH).. -c \$<'; \\
         \$(COMPILE_FREE) \$(FLAGS) \$(MOD_PATH).. -c \$(F90FILE); rm -f \$(F90FILE); \\
      else \\
         echo '\$(COMPILE_FREE) \$(FLAGS) \$(MOD_PATH). -c \$<'; \\
         \$(COMPILE_FREE) \$(FLAGS) \$(MOD_PATH).. -c \$<; \\
      fi

#Check that library files are current. 
\$(LIB) :
	@cd \$(LIB_DIR); $LOCAL_MAKE \$(TYPE)

clean:
	- rm -f *.o *.mod
EOF

  fi

  chmod u+x-w $MAKEFILE

#---------------------------------------------------------------
#   Symbolically link $MAKEFILE to Debug, Release directories
#---------------------------------------------------------------
  rm -f ./Release/$MAKEFILE  ./Debug/$MAKEFILE
  cd Release; ln -s ../$MAKEFILE .
  cd ../Debug; ln -s ../$MAKEFILE .
  cd ..

#---------------------------------------------------------------
#   Move input demo files (if any) and examples : ZIP will handle this automatically
#---------------------------------------------------------------


$ECHO 
$ECHO "  $DIR directory tree completed"
$ECHO "  Type 'make release (debug)' to make a release (debug) version of $EXE_FILE"
$ECHO
$ECHO "  ======================================================================="
$ECHO "  IMPORTANT: FOR STELLOPT (STELLARATOR OPTIMIZER) TO WORK PROPERLY"
$ECHO
$ECHO "  All spawnable subprocessess (executables) MUST be symbolically linked (ln -s)"
$ECHO "  to the \$MY_HOME directory as follows:"
$ECHO "           cd \$MY_HOME"
$ECHO "           ln -s ABSOLUTE_PATH_TO_EXECUTABLE/executable_name ."
$ECHO
$ECHO "  NOTE: \$MY_HOME = $MY_HOME"
$ECHO "        MUST be in your path for STELLOPT to work properly!"
$ECHO "  ======================================================================="
$ECHO
$ECHO "  End $DIR creation loop"

#---------------------------------------------------------------
#   Run library makefile
#---------------------------------------------------------------
  if [ "$FILES" = "libstell" ]
  then
     if [ "$CLEAN" = "clean" ] && [ "$CLEAN_LIBMAKE" = 'Y' ]
     then 
        make clean_$VERSION
     else     
        make $VERSION
     fi

  else

#---------------------------------------------------------------
#   Run individual makefiles (Note: libstell.a MUST EXIST before
#   these makefiles will work correctly)
#---------------------------------------------------------------
     if [ "$CLEAN" = "clean" ]
     then
        make clean_$VERSION
     else
        make $VERSION
     fi
  fi


#---------------------------------------------------------------
#   Create RUNOPT script and put it into STELLOPT directory
#   This is used to run xstellopt interactively on MPI systems
#---------------------------------------------------------------
  if [ "$MPI_RUN" != "" ]
  then
     if [ "$FILES" = "stellopt" ]
     then    
        [ -f runopt ] && rm runopt
cat > runopt << EOF
#!/bin/sh
#USAGE: runopt \$1 \$2
#\$1: name of input file
#\$2: number of processors requested
if [ ! -n \"\$2\" ]
then
   echo \"Usage: runopt <filename> <no processors>\"
   exit [0]
fi
EOF
        if `echo $MPI_RUN | grep -q 'nodes'`
        then
cat >> runopt << EOF
if [ \"\$2\" -lt $processors_per_node ]
then
   proc_per_node=\$2
else
   proc_per_node=$processors_per_node
fi
ppn1=\`expr \$proc_per_node - 1\`
numnodes=\`expr \$2 + \$ppn1\`
numnodes=\`expr \$numnodes / \$proc_per_node\`
EOF
        fi   

     $ECHO $MPI_RUN >> runopt
     $ECHO 
     $ECHO "  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
     $ECHO "  Use the RUNOPT script to execute xstellopt code interactively"
     $ECHO "  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
     $ECHO 
     chmod u+x runopt
     PWD1=`pwd`
     rm -f $MY_HOME/runopt; ln -fs $PWD1/runopt $MY_HOME/runopt
  
     fi
  fi

#---------------------------------------------------------------
#   End for-do loop over FILES_TO_MAKE  
#---------------------------------------------------------------
done

#---------------------------------------------------------------
#   Clean-up: make *.dep read only
#---------------------------------------------------------------
cd $TOP_LEVEL_DIR
rm awk_dep.awk
find "." -name '*.dep' -exec chmod u-w {} \;
umask $INIT_UMASK
chmod u+w tarstell
./tarstell
[ -f stellunix.tar ] && $COMPRESS stellunix.tar
